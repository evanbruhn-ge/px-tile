{"version":3,"sources":["px-tile.es6.js"],"names":["Polymer","is","properties","hoverable","type","Boolean","value","observer","_hovered","mainTitle","String","subtitle","description","overlayDescription","actionButtons","Object","titleEditable","titleValidator","Function","dropHandler","_showEditForm","_selected","_hover","_handleDrag","e","preventDefault","_handleDrop","dataTransfer","getData","_selectedChanged","$","tile","classList","add","remove","_hoverableChanged","overlay","_hoverTextColor","window","getComputedStyle","color","attached","listen","detached","unlisten","_getClass","hovered","_actionButtonsChanged","_hasPrimaryBtn","_hasActionButtons","items","length","maxPrimaryButtons","x","isPrimary","_onDataChanged","_hasTitleActionBtn","_hasTitleSubtitleActionBtn","_hasData","_titleEditableChanged","title","_titleValidatorChanged","validator","eval","_dropHandlerChanged"],"mappings":"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","file":"px-tile.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018, General Electric\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  Polymer({\n\n    is: 'px-tile',\n\n    properties: {\n      /**\n       * If true, hovering over the card will cause an overlay to appear\n       * with more detailed information, including the description\n       * and an optional slot for showing a footer at the bottom.\n       * _Note: not recommended for mobile applications due to variation\n       * or lack of support for hover on mobile devices._\n       */\n      hoverable: {\n        type: Boolean,\n        value: false,\n        observer: '_hoverableChanged'\n      },\n      /**\n       * Whether the tile is currently being hovered.\n       */\n      _hovered: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Main text label for the tile.\n       */\n      mainTitle: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Subtitle text for the tile.\n       */\n      subtitle: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n       /**\n        * Description information to be displayed underneath tile and subtitle.\n        * Default : Only the first ~3 lines of text will be displayed, after which it will be truncated.\n        * You can customize by adjusting the `--px-tile-desc-text-height` CSS variable. (e.g. 1 line = 1 rem,\n        * to set to 5 lines truncated, set `--px-tile-desc-text-height: 5rem`).\n       */\n      description: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Description information to be displayed in the overlay of a hoverable card.\n       * It has more space to display text content and can be adjusted along with\n       * total height of the tile.\n       */\n      overlayDescription: {\n        type: String,\n        value: '',\n        observer: '_onDataChanged'\n      },\n      /**\n       * Configuration object for the action buttons displayed in the tile.\n       * The primary button is displayed in the header/title area of the tile\n       * whereas the rest are displayed at the bottom of the tile.\n       * The `px-tile-action-tapped` event is fired when any of the action buttons is tapped.\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      },\n      /**\n       * Controls whether the title can be edited via an inline form.\n       * Also enables behaviour where the title form will be shown if the title property is blank.\n       */\n      titleEditable: {\n        type: String,\n        value: '',\n        observer: '_titleEditableChanged'\n      },\n      /**\n       * Validator that's executed when the title is changed via the title form.\n       * Utilizes the px-validation component, supplied functions should return an object matching the following spec:\n       * { valid: true or false, message: 'optional validation error message here' }\n       */\n      titleValidator: {\n        type: Function,\n        observer: '_titleValidatorChanged'\n      },\n      /**\n       * Custom function that's invoked when the drop event is fired\n       */\n      dropHandler: {\n        type: Function,\n        observer: '_dropHandlerChanged'\n      },\n      /**\n       * Property used internally for showing or hiding the edit title form\n       */\n      _showEditForm: {\n        type: Boolean,\n        value: true\n      },\n      /**\n       * Property used internally for determining the selected state on the px-tile\n       */\n      _selected: {\n        type: Boolean,\n        value: false,\n        observer: '_selectedChanged'\n      }\n    },\n    /**\n     * Method used internally for flipping the hovered status of a tile.\n     */\n    _hover() {\n      if(this.hoverable) {\n        this._hovered = !this._hovered;\n      }\n    },\n    /**\n     * Method used internally for setting the selected state based on the input event\n     */\n    _handleDrag(e) {\n      e.preventDefault();\n      this._selected = e.type === 'dragenter';\n    },\n    /**\n     * Handles the drop event, and prevents other drag events from blocking the drop event.\n     * The drop event will be passed to the px-tile's drop-handler function if available.\n     */\n    _handleDrop(e) {\n      e.preventDefault();\n      if (e.type === 'drop') {\n        this._selected = false;\n        if (typeof this.dropHandler === 'function') this.dropHandler(e.dataTransfer.getData('text'), this, e);\n      }\n    },\n    /**\n     * Sets or removes the selected class from the px-tile container based on the selected state\n     */\n    _selectedChanged() {\n      if (this._selected) this.$.tile.classList.add('selected');\n      else this.$.tile.classList.remove('selected');\n    },\n    /**\n     * On change callback to remove overlay\n     */\n    _hoverableChanged() {\n      this.$.overlay.classList.add('overlay-remove');\n      if(this.hoverable) {\n        this.$.overlay.classList.remove('overlay-remove');\n        // extract overlay text color to pass to other components\n        this._hoverTextColor = window.getComputedStyle(this.$.overlay).color;\n      }\n    },\n    /**\n     * Attach event listeners for hoverable tiles.\n     */\n    attached() {\n      this.listen(this.$.overlay, 'mouseenter', '_hover');\n      this.listen(this.$.overlay, 'mouseleave', '_hover');\n      this.listen(this, 'dragenter', '_handleDrag');\n      this.listen(this, 'dragleave', '_handleDrag');\n      this.listen(this, 'dragover', '_handleDrop');\n      this.listen(this, 'drop', '_handleDrop');\n    },\n    /**\n     * Detach event listeners for hoverable tiles.\n     */\n    detached() {\n      this.unlisten(this.$.overlay, 'mouseenter');\n      this.unlisten(this.$.overlay, 'mouseleave');\n      this.unlisten(this, 'dragenter');\n      this.unlisten(this, 'dragleave');\n      this.listen(this, 'dragover');\n      this.listen(this, 'drop');\n    },\n    /**\n     * Returns class to control overlay for hoverable tiles.\n     */\n    _getClass(hovered) {\n      return hovered ? 'hovered' : '';\n    },\n    /**\n     * On change callback for actionButtons to set _hasActionButtons and _hasPrimaryBtn flag\n     */\n    _actionButtonsChanged() {\n      this._hasPrimaryBtn = false;\n      this._hasActionButtons = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > 0;\n      if(this._hasActionButtons) {\n        let maxPrimaryButtons = this.actionButtons.maxPrimaryButtons || 1;\n        for(let x in this.actionButtons.items) {\n          if(this.actionButtons.items[x].isPrimary) {\n            this._hasPrimaryBtn = true;\n            break;\n          }\n        }\n      }\n      this._onDataChanged();\n    },\n    /**\n     * On change callback for either property to set _hasTitleActionBtn, _hasTitleSubtitleActionBtn, and _hasData flags\n     */\n    _onDataChanged() {\n      this._hasTitleActionBtn = this.mainTitle && this.mainTitle.length > 0|| this._hasPrimaryBtn;\n      this._hasTitleSubtitleActionBtn = this.subtitle && this.subtitle.length > 0 || this._hasTitleActionBtn;\n      this._hasData = this._hasActionButtons || this._hasTitleSubtitleActionBtn;\n      this._showEditForm = this.mainTitle.length === 0;\n    },\n\n    /**\n     * Observer for title-editable property, controls whether the title form will appear when _showEditForm property is true and/or when mainTitle property is blank\n     */\n    _titleEditableChanged(title) {\n      // TODO: This does nothing yet.\n    },\n\n    /**\n     * Observer for title-validator property changes.\n     */\n    _titleValidatorChanged(validator) {\n      // Handle functions specified in component markup (ie. strings)\n      if (typeof validator === 'string') {\n        // TODO: There must be a better way!\n        this.titleValidator = eval(validator);\n        return;\n      }\n    },\n\n    /**\n     * Observer for drop-handler property changes.\n     */\n    _dropHandlerChanged(dropHandler) {\n      // Handle functions specified in component markup (ie. strings)\n      if (typeof dropHandler === 'string') {\n        // TODO: There must be a better way!\n        this.dropHandler = eval(dropHandler);\n        return;\n      }\n    }\n\n    /**\n     * @event px-tile-action-tapped\n     *\n     * Event fired when an item from actionButtons is tapped. `Evt.detail` includes the details of the tapped item, e.g. `{\"id\": \"1\", \"label\": \"Favorite\"}`\n     *\n     * Usage:\n     * ```\n     * window.addEventListener('px-tile-action-tapped', function(evt){\n     *   console.log(evt.detail);\n     * });\n     * ```\n     */\n  });\n})();\n"]}