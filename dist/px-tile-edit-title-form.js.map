{"version":3,"sources":["px-tile-edit-title-form.es6.js"],"names":["Polymer","is","properties","validator","type","Function","currentTitle","String","value","notify","newTitle","showEditForm","Boolean","commitEdit","inputValidState","getValidity","applyValidationStyle","valid","message","cancelEdit","isValid","handleKeypress","e","key","titleInput","$$","invalidTitleError","saveButton","classList","add","innerText","remove","disabled"],"mappings":"aAAA;;;;;;;;;;;;;;;GAiBA,CAAC,UAAW,CACVA,QAAQ,CACNC,GAAI,yBADE,CAGNC,WAAY,CACV;;SAGAC,UAAW,CACTC,KAAMC,QADG,CAJD,CAOV;;SAGAC,aAAc,CACZF,KAAMG,MADM,CAEZC,MAAO,EAFK,CAGZC,OAAQ,IAHI,CAVJ,CAeV;;SAGAC,SAAU,CACRN,KAAMG,MADE,CAERC,MAAO,EAFC,CAlBA,CAsBV;;SAGAG,aAAc,CACZP,KAAMQ,OADM,CAEZH,OAAQ,IAFI,CAzBJ,CAHN,CAiCN;;OAGAI,WAAY,qBAAW,CACrB,GAAMC,iBAAkB,KAAKC,WAAL,EAAxB,CACA,KAAKC,oBAAL,CAA0BF,gBAAgBG,KAA1C,CAAiDH,gBAAgBI,OAAjE,EACA,GAAIJ,gBAAgBG,KAApB,CAA2B,CACzB,KAAKX,YAAL,CAAoB,KAAKI,QAAzB,CACA,KAAKC,YAAL,CAAoB,KACrB,CACF,CA3CK,CA6CN;;OAGAQ,WAAY,qBAAW,CACrB,KAAKT,QAAL,CAAgB,KAAKJ,YAArB,CACA,KAAKK,YAAL,CAAoB,KAApB,CACA,KAAKS,OAAL,EACD,CApDK,CAsDN;;;OAIAC,eAAgB,wBAASC,CAAT,CAAY,CAC1B,GAAMR,iBAAkB,KAAKC,WAAL,EAAxB,CACA,KAAKC,oBAAL,CAA0BF,gBAAgBG,KAA1C,CAAiDH,gBAAgBI,OAAjE,EACA,GAAIJ,gBAAgBG,KAAhB,EAAyBK,EAAEC,GAAF,GAAU,OAAvC,CAAgD,CAC9C;AACA,KAAKV,UAAL,EACD,CACD,GAAI,KAAKP,YAAL,EAAqBgB,EAAEC,GAAF,GAAU,QAAnC,CAA6C,CAC3C;AACA,KAAKJ,UAAL,EACD,CACF,CArEK,CAuEN;;OAGAH,oBA1EM,+BA0EeC,KA1Ef,CA0EsBC,OA1EtB,CA0E+B,CACnC,GAAMM,YAAa,KAAKC,EAAL,CAAQ,aAAR,CAAnB,CACA,GAAMC,mBAAoB,KAAKD,EAAL,CAAQ,oBAAR,CAA1B,CACA,GAAME,YAAa,KAAKF,EAAL,CAAQ,aAAR,CAAnB,CAEA,GAAIR,KAAJ,CAAW,CACTS,kBAAkBE,SAAlB,CAA4BC,GAA5B,CAAgC,QAAhC,EACAH,kBAAkBI,SAAlB,CAA8B,EAA9B,CACAN,WAAWI,SAAX,CAAqBG,MAArB,CAA4B,kBAA5B,EACAJ,WAAWK,QAAX,CAAsB,KACvB,CALD,IAKO,CACLN,kBAAkBE,SAAlB,CAA4BG,MAA5B,CAAmC,QAAnC,EACAL,kBAAkBI,SAAlB,CAA8BZ,SAAW,eAAzC,CACAM,WAAWI,SAAX,CAAqBC,GAArB,CAAyB,kBAAzB,EACAF,WAAWK,QAAX,CAAsB,IACvB,CACF,CA1FK,CA4FN;;OAGAjB,YAAa,sBAAW,CACtB,MAAO,OAAO,MAAKZ,SAAZ,GAA0B,UAA1B,CAAuC,KAAKA,SAAL,CAAe,KAAKO,QAApB,CAAvC,CAAuE,CAAEO,MAAO,IAAT,CAC/E,CAjGK,CAAR,CAmGD,CApGD","file":"px-tile-edit-title-form.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018, General Electric\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n(function() {\n  Polymer({\n    is: 'px-tile-edit-title-form',\n\n    properties: {\n      /**\n       * Validator that's executed when the title is changed via the title form.\n       */\n      validator: {\n        type: Function\n      },\n      /**\n       * The mainTitle property set on the px-tile when the px-tile-edit-title-form component was revealed\n       */\n      currentTitle: {\n        type: String,\n        value: '',\n        notify: true\n      },\n      /**\n       * The current value of the px-tile edit title input field. If valid, this property is used to set the mainTitle property on save.\n       */\n      newTitle: {\n        type: String,\n        value: ''\n      },\n      /**\n       * Property used internally for showing or hiding the edit title form\n       */\n      showEditForm: {\n        type: Boolean,\n        notify: true\n      }\n    },\n    /**\n     * Applies the input form value to the parent px-tile's mainTitle property (reflected via the currentTitle property) and hides the edit form\n     */\n    commitEdit: function() {\n      const inputValidState = this.getValidity();\n      this.applyValidationStyle(inputValidState.valid, inputValidState.message);\n      if (inputValidState.valid) {\n        this.currentTitle = this.newTitle;\n        this.showEditForm = false;\n      }\n    },\n\n    /**\n     * Hides the edit form without saving\n     */\n    cancelEdit: function() {\n      this.newTitle = this.currentTitle;\n      this.showEditForm = false;\n      this.isValid();\n    },\n\n    /**\n     * Applies validation styles to the edit form based on the result from the validator function,\n     * and triggers save and cancel with the Enter and Escape keys respectively.\n     */\n    handleKeypress: function(e) {\n      const inputValidState = this.getValidity();\n      this.applyValidationStyle(inputValidState.valid, inputValidState.message);\n      if (inputValidState.valid && e.key === 'Enter') {\n        // Save on enter if input is valid\n        this.commitEdit();\n      }\n      if (this.currentTitle && e.key === 'Escape') {\n        // Cancel on escape if there's a valid input to revert to\n        this.cancelEdit();\n      }\n    },\n\n    /**\n     * Applies validation styles to the edit form.\n     */\n    applyValidationStyle(valid, message) {\n      const titleInput = this.$$('#titleInput');\n      const invalidTitleError = this.$$('#invalidTitleError');\n      const saveButton = this.$$('#commitEdit');\n\n      if (valid) {\n        invalidTitleError.classList.add('hidden');\n        invalidTitleError.innerText = '';\n        titleInput.classList.remove('validation-error');\n        saveButton.disabled = false;\n      } else {\n        invalidTitleError.classList.remove('hidden');\n        invalidTitleError.innerText = message || 'Invalid title';\n        titleInput.classList.add('validation-error');\n        saveButton.disabled = true;\n      }\n    },\n\n    /**\n     * Determines the validity of the input value. If no validator function is provided, will always report true (ie. valid)\n     */\n    getValidity: function() {\n      return typeof this.validator === 'function' ? this.validator(this.newTitle) : { valid: true };\n    }\n  });\n})();\n"]}